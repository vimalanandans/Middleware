apply plugin: 'android-library'

android {
    compileSdkVersion project.androidCompileSdkVersion.toInteger()
    buildToolsVersion project.androidBuildToolsVersion

    defaultConfig {
        minSdkVersion project.androidMinSdkVersion.toInteger()
        targetSdkVersion project.androidTargetSdkVersion.toInteger()
        versionCode project.androidVersionCode.toInteger()
        versionName project.androidVersionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }

}

dependencies {
    compile "com.android.support:appcompat-v7:${project.androidSupportLibraryVersion}"
    //compile "com.android.support:support-v4:${project.androidSupportLibraryVersion}"

    compile project(':android:uhu-android')
    compile project(':android:libraries:zbarscanner')

    if (project.local == "false") {
        compile "com.bosch.upa.uhu:commons:${version}"
        compile "com.bosch.upa.uhu:actions:${version}"
        compile("com.bosch.upa.uhu:pipes:${version}")
    } else {
        compile project(':core:uhu:commons')
        compile project(':core:actions')
        compile project(':core:uhu:pipes')
    }
}
