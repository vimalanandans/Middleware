apply plugin: 'org.sonarqube'
buildscript {
    repositories {
        mavenCentral()
        jcenter {
            url "http://jcenter.bintray.com/"
        }
    }
    ext {
        androidGradleToolsVersion = "2.2.0"
        androidBuildToolsVersion = "24.0.2"
        androidSupportLibraryVersion = "24.2.1"
        androidCompileSdkVersion = "24"
        androidMinSdkVersion = "16"
        androidTargetSdkVersion = "24"
        androidVersionCode = "1"
        androidVersionName = "1.0"
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${project.androidGradleToolsVersion}"
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.1.0')
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1"
    }
}
allprojects {
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'distribution'
    apply plugin: 'license'
    group = 'com.bezirk'
    version = "3.0.2"

    ext {
        artifactRepoBase = "https://bezirk.artifactoryonline.com/bezirk"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "${artifactRepoBase}/libs-release-local/"
        }
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = "1.7"
        targetCompatibility = "1.7"
    }
    license {
        header rootProject.file('LICENSE')
        include "**/*.java"
        excludes(["**/*.properties", "**/*Test.java", "**/package-info.java"])
        strictCheck true
        ignoreFailures false
    }
}

//Copy files into a zipped distribution
distributions {
    main {
        contents {
            from {
                'build/dist'
            }
            into '/'
        }
    }
}

sonarqube {
    properties {
        def SONAR_HOST=project.hasProperty('sonar_host') ? "${sonar_host}" : System.getenv('sonar_host')
        def SONAR_USER=project.hasProperty('sonar_login') ? "${sonar_login}" : System.getenv('sonar_login')
        def SONAR_PASSWORD=project.hasProperty('sonar_password') ? "${sonar_password}" : System.getenv('sonar_password')
        property "sonar.host.url", "${SONAR_HOST}"
        property "sonar.projectKey", "Middleware_Integration"
        property "sonar.projectName", "Bezirk Middleware Integration Branch"
        property "sonar.projectDescription", "Bezirk Middleware Integration Branch"
        property "sonar.projectVersion", "3.0-Alpha"
        property "sonar.projectBaseDir", "."
        property "sonar.sources", "core,java,build"
        property "sonar.exclusions", "**/build/**/.class,**/build/**/*.java,**/src/**/package-info.java"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.profile", "BezirkProfile"
        property "sonar.login", "${SONAR_USER}"
        property "sonar.password", "${SONAR_PASSWORD}"
        property "sonar.android.lint.report", "./build/outputs/lint-results.xml"
    }
}
