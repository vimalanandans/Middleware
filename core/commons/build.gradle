apply plugin: 'java'
jar {
    manifest {
        attributes 'Implementation-Title': 'Commons', 'Implementation-Version': version
    }
}

dependencies {
    testCompile project(':core:bezirk-middleware-api')
    compile project(':core:control-messages')

    compile 'org.slf4j:slf4j-api:1.7.6'
    compile 'com.google.zxing:core:3.2.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.xerial:sqlite-jdbc:3.7.2'
    testCompile 'org.mockito:mockito-all:1.10.19'
}

/*
* Before the starting of the test task, delete the uhu-database.sqlite file as it might contain the stale data.
* This file is created during running of testcase.
*/
test.doFirst {
    project.delete 'mw_database.sqlite'
}

test.doLast {
    project.delete 'mw_database.sqlite'
}

//if version mismatch occures
//build.doLast {
//    println 'Writing the version file'
//
//    def verDir = "${rootDir}/../release-tool/config/version.properties"
//    def verFile = "${rootDir}/core/bezirk/commons/src/main/resources/version.properties"
////	def verFileForJava = "${rootDir}/../Java-Build/bezirk-pc/src/main/resources/version.properties"
//
//    Properties props = new Properties()
//    props.load(new FileInputStream(verDir))
//    String major = props.getProperty("major")
//    String minor = props.getProperty("minor")
//    String fix = props.getProperty("fix")
//    //create a new file for each build
//    if (fix.contains("0")) // exclude 0 in the release version
//        new File(verFile).text = "BEZIRK_VERSION=${major}.${minor}"
//    else
//        new File(verFile).text = "BEZIRK_VERSION=${major}.${minor}.${fix}"
////	new File(verFileForJava).text = "BEZIRK_VERSION=${major}.${minor}.${fix}"
//}

build.doLast {
    def verFile = "${projectDir}/src/main/resources/version.properties"
    new File(verFile).text = "BEZIRK_VERSION=${version}"
}




