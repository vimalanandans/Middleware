/**
 * 
 */
package com.bezirk.test.sphere.crypto;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.UUID;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.bezirk.persistence.SphereRegistry;
import com.bezirk.sphere.security.CryptoEngine;
import com.bezirk.sphere.security.SphereKeys;
import com.bezirk.sphere.security.UPABlockCipherService;
import com.bezirk.test.sphere.testUtilities.MockSetUpUtility;

/**
 * @author Rishabh Gulati
 * 
 */
public class DecryptSerializedContent {
    private static SphereRegistry registry;
    private static CryptoEngine cryptoEngine;
    private SphereKeys sKeys;
    private final UPABlockCipherService cipherService = new UPABlockCipherService();
    private final String KEY_FACTORY_ALGORITHM = "DSA";
    private final String SECURE_RANDOM_ALGORITHM = "SHA1PRNG";
    private static String sphereId;
    private final String content = "Testing serialized content decryption!!!";
    private static final Logger log = LoggerFactory.getLogger(DecryptSerializedContent.class);
    private static final MockSetUpUtility mockSetUp = new MockSetUpUtility();

    /**
     * @throws java.lang.Exception
     */
    @BeforeClass
    public static void setUpBeforeClass() throws Exception {
        log.info("***** Setting up DecryptSerializedContent TestCase *****");
        mockSetUp.setUPTestEnv();
        registry = mockSetUp.registry;
        cryptoEngine = mockSetUp.cryptoEngine;
    }

    /**
     * @throws java.lang.Exception
     */
    @AfterClass
    public static void tearDownAfterClass() throws Exception {
        log.info("***** Shutting down DecryptSerializedContent TestCase *****");
        mockSetUp.destroyTestSetUp();
    }

    /**
     * @throws java.lang.Exception
     */
    @Before
    public void setUp() throws Exception {
        registry = new SphereRegistry();
        cryptoEngine = new CryptoEngine(registry);
        sphereId = UUID.randomUUID().toString();
        KeyPairGenerator keyGen;
        SecureRandom random;
        try {
            keyGen = KeyPairGenerator.getInstance(KEY_FACTORY_ALGORITHM);
            random = SecureRandom.getInstance(SECURE_RANDOM_ALGORITHM);
            keyGen.initialize(1024, random);
            KeyPair pair = keyGen.generateKeyPair();
            sKeys = new SphereKeys(new UPABlockCipherService().generateNewKey(128).getEncoded(),
                    pair.getPrivate().getEncoded(), pair.getPublic().getEncoded());
            registry.putSphereKeys(sphereId, sKeys);
        } catch (NoSuchAlgorithmException e) {
            log.error("Exception while setting up the test case");
        }
    }

    /**
     * @throws java.lang.Exception
     */
    @After
    public void tearDown() throws Exception {
    }

    /**
     * Test whether encrypted content generated by an instance of
     * {@link UPABlockCipherService} is decrypted by
     * {@link CryptoEngine#decryptSphereContent(java.lang.String, byte[])}
     * .
     */
    @Test
    public final void testDecryptSphereContent() {
        byte[] encryptedContent = cipherService.encrypt(content.getBytes(), sKeys.getSphereKey()).getBytes();
        String decryptedContent;
        try {
            decryptedContent = new String(cryptoEngine.decryptSphereContent(sphereId, encryptedContent));
            assertTrue(content.equals(decryptedContent));
        } catch (Exception e) {
            log.error("Error while encrypting the content" + e.getMessage());
        }
    }

    /**
     * Test operation of
     * {@link CryptoEngine#decryptSphereContent(java.lang.String, byte[])}
     * with null sphereId
     * 
     */
    @Test
    public final void testDecryptSphereContentSphereIdNull() {
        assertEquals(null, cryptoEngine.decryptSphereContent(null, content.getBytes()));
    }

    /**
     * Test operation of
     * {@link CryptoEngine#decryptSphereContent(java.lang.String, byte[])}
     * with null serialized encrypted content
     * 
     */
    @Test
    public final void testDecryptSphereContentSerializedContentNull() {
        assertEquals(null, cryptoEngine.decryptSphereContent(sphereId, null));
    }

    /**
     * Test operation of
     * {@link CryptoEngine#decryptSphereContent(java.lang.String, byte[])}
     * with null serialized encrypted content and sphereId
     * 
     */
    @Test
    public final void testDecryptSphereContentBothNull() {
        assertEquals(null, cryptoEngine.decryptSphereContent(null, null));
    }

    /**
     * Test operation of
     * {@link CryptoEngine#decryptSphereContent(java.lang.String, byte[])}
     * with an entry of passed sphereId absent
     * 
     */
    @Test
    public final void testDecryptSphereContentAbsentSphereId() {
        String newSphereId = UUID.randomUUID().toString();
        assertEquals(null, cryptoEngine.decryptSphereContent(newSphereId, content.getBytes()));
    }

}
