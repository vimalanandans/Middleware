package com.bosch.upa.uhu.sphere.ui;

import java.awt.EventQueue;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.border.EmptyBorder;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.bosch.upa.devices.UPADeviceInterface;
import com.bosch.upa.uhu.commons.UhuVersion;
import com.bosch.upa.uhu.commstest.ui.CommsTestJFrame;
import com.bosch.upa.uhu.network.IntfInetPair;
import com.bosch.upa.uhu.network.UhuNetworkUtilities;
import com.bosch.upa.uhu.sphere.SphereManager;
import com.bosch.upa.uhu.sphere.api.IUhuSphereAPI;
import com.bosch.upa.uhu.sphere.impl.UhuSphere;
import com.bosch.upa.uhu.util.TestUIMouseListener;

/**
 * @author Jan Zibuschka (jan.zibuschka@de.bosch.com) GUI for demoing/testing
 *         Spheres (mostly auto-generated)
 * 
 */
public class SphereManagementGUI extends JFrame {

    /**
     * (autogenerated variables)
     */
    private static final long serialVersionUID = -5590619380386034560L;
    private JLabel warningLbl;
    private static SphereManagementGUI staticThis;
    public static SphereManagementGUI getStaticThis() {
		return staticThis;
	}

	public static void setStaticThis(SphereManagementGUI staticThis) {
		SphereManagementGUI.staticThis = staticThis;
	}

	private JMenuBar menuBar;
    private static final Logger LOGGER = LoggerFactory
            .getLogger(SphereManagementGUI.class);

    private transient String misMatchVersion = UhuVersion.UHU_VERSION;
    private transient UhuSphere sphereManager;
    
    /**
     * Create the frame. (autogenerated code from WindowBuilder)
     */
    public SphereManagementGUI() {
        initSphereManagement();
    }

    public SphereManagementGUI(IUhuSphereAPI sphereForPC) {
        this.sphereManager = (UhuSphere) sphereForPC;
        initSphereManagement();
    }


    /**
     * Launch the application. (autogenerated code from WindowBuilder)
     */
    public static void main(String... args) {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    final SphereManagementGUI frame = new SphereManagementGUI();
                    frame.setVisible(true);
                } catch (Exception e) {
                    LOGGER.error("Error in intializing sphere management GUI. ",e);
                
                }
            }
        });
    }

    private void initSphereManagement() {
        staticThis = this;
        setTitle("Sphere Management");
        setResizable(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setJMenuBar(menuBar);

        setBounds(10, 10, 902, 829);
        final JPanel contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);
        contentPane.setLayout(null);
        menuBar = new JMenuBar();

        // build the menu for catch code display and entry
        final JMenu settingsMenu = new JMenu("Setting");
        prepareSettingsMenu(settingsMenu);
        menuBar.add(settingsMenu);
        setJMenuBar(menuBar);

        JLabel lblQR;
        try {
            lblQR = new JLabel(new ImageIcon(SphereManager.getUhuQRCode()
                    .getQRCode()));
            lblQR.setBounds(100, 100, 600, 600);
            contentPane.add(lblQR);
        } catch (Exception e1) {
            LOGGER.error("Exception in setting QRCode.", e1);
        }

        final Timer timer = new Timer(500, new TimerListener());
        timer.start();

        // put the warning icon and set visibility to false
        warningLbl = prepareWarningLabel();
        contentPane.add(warningLbl);

    }

    private JLabel prepareWarningLabel() {
        warningLbl = new JLabel(new ImageIcon(getClass().getResource(
                "/ic_warning.png")));
        warningLbl.setBounds(new Rectangle(20, 20, 1600, 40));
        warningLbl.setVisible(false);
        
        final TestUIMouseListener testUIMouseListener = new TestUIMouseListener("sphereUI", null, 0, misMatchVersion);

        warningLbl.addMouseListener(testUIMouseListener);
        return warningLbl;
    }

    private void prepareSettingsMenu(final JMenu settingsMenu) {
        final JMenuItem interfaceMenuItem = new JMenuItem(
                "Select Network Interface");
        final JMenuItem catchMenuItem = new JMenuItem("Catch Sphere Code Entry");
        final JMenuItem displaySphereCodeMenuItem = new JMenuItem(
                "Catch Sphere Code Display");
        final JMenuItem commsTestMenuItem = new JMenuItem("Comms Test");

        interfaceMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent arg0) {
                selectInterface();
            }
        });
        catchMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent arg0) {
                spherePCCatch(SphereManagementGUI.this);
            }
        });
        displaySphereCodeMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent arg0) {
                displayCatchCode(SphereManagementGUI.this);
            }
        });

        commsTestMenuItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                displayCommsTestGUI();
            }
        });

        settingsMenu.add(interfaceMenuItem);
        settingsMenu.add(catchMenuItem);
        settingsMenu.add(displaySphereCodeMenuItem);
        settingsMenu.add(commsTestMenuItem);
    }

    private void selectInterface() {
        final Iterator<IntfInetPair> itr = UhuNetworkUtilities.getIntfInetPair()
                .iterator();
        final List<String> temp = new ArrayList<String>();
        IntfInetPair pair;
        while (itr.hasNext()) {
            pair = itr.next();
            temp.add(pair.getIntf().getName());
        }
        LOGGER.debug(temp.toString());
        final String[] interfaceName = temp.toArray(new String[temp.size()]);

        final String result = (String) JOptionPane.showInputDialog(null,
                "Choose Interface Name", "Uhu Ethernet Configuration",
                JOptionPane.QUESTION_MESSAGE, null, interfaceName, null);
        try {
            final String classpath = UPADeviceInterface.class.getClassLoader()
                    .getResource("comms.properties").getPath();
            final Properties properties = new Properties();
            final FileInputStream configStream = new FileInputStream(classpath);
            properties.load(configStream);
            configStream.close();

            properties.setProperty("InterfaceName", result);
            final FileOutputStream output = new FileOutputStream(classpath);
            properties.store(output, null);
            output.close();
        } catch (Exception e) {
            LOGGER.error("Could not read comms properties file",e);
        }

    }

    private void spherePCCatch(JFrame frame) {

        final String catchCode = (String) JOptionPane.showInputDialog(frame,
                "Catch the PC\n", "Enter below the catch code for other PC",
                JOptionPane.PLAIN_MESSAGE, null, null, "");

        if (catchCode != null && !catchCode.isEmpty()) {
            // send the catch code to the Sphere
            sphereManager.processCatchShortCode(catchCode);
        }
    }

    private void displayCatchCode(JFrame frame) {

        // get the catch code from the sphere

        final String defaultSphereCode = SphereManager.getUhuQRCode()
                .getDefaultSphereCode();
        final String displayString = "Enter the Catch code : " + defaultSphereCode;

        JOptionPane.showMessageDialog(frame, displayString);

    }

    public void showWarningIcon(boolean showWarning, String misMatchVersion) {
        if (showWarning) {
            this.misMatchVersion = misMatchVersion;
            warningLbl.setVisible(true);
        }
    }

    private void displayCommsTestGUI() {
        final JFrame frame = new CommsTestJFrame();
        frame.setVisible(true);
    }

    /**
     * @author Jan Zibuschka
     * 
     *         TimerListener; regularly refreshes list of known Spheres
     * 
     */
    private static class TimerListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent actionEvent) {
            // available in commit ID : 3f11ad216f9a0551155ef4fc4b27ebfb264757e1
        }

    }

}